server:
  port: 8080
spring:
  application:
    name: "accounts"
  profiles:
    active: "qa"
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
  config:
    import: "optional:configserver:http://localhost:8071/"
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true


endpoints:
  shutdown:
    enabled: true

# To connect to eureka server
eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

#To provide info about this service to the actuator endpoint.
info:
  app:
    name: "accounts"
    description: "Bank Accounts Application"
    version: "1.0.0"

logging:
  level:
    com:
      vishnu:
        accounts: DEBUG

#Below configuration is for circuit breaker while invoking other services using feign client.
resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10   # Specifies the no.of requests to monitor before taking a decision whether to keep the curcuit open or closed.
      permittedNumberOfCallsInHalfOpenState: 2  # no .of requests to be sent when the circuit is o=in half open state
      failureRateThreshold: 50  # If 50%  of the total requests are getting failed, then fall into open state.
      waitDurationInOpenState: 10000 # wait 10 secs in open status before changing into half open state.

#Below configuration is for retry mechanism
resilience4j.retry:
  configs:
    default:
      maxRetryAttempts: 3
      waitDuration: 300 # Specifies the time(in ms) to wait for each retry .
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions: #Retry mechanism won't be applicable if any of the mentioned exceptions occur and directly fallback method would be executed.
        - java.lang.NullPointerException
      retryExceptions:  #If retryExceptions are mentioned, then there is no point in mentioning ignoreExecptions.
        - java.util.concurrent.TimeoutException

#Allows only 1 request per 5000ms. The other waiting threads in the queue will get timedout after 1000ms.
resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000
      limitRefreshPeriod: 5000
      limitForPeriod: 1